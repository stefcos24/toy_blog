version: '3'

services:
  toyblog:
    container_name: toyblog
    build: .
    depends_on:
      - migrations
      - postgres
      - redis
    ports:
      - "8000:8000"
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DEBUG=${DEBUG}
    restart: always

  migrations:
    container_name: migrations
    command: python manage.py migrate --noinput
    build: .
    depends_on:
      - postgres
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DEBUG=${DEBUG}
    restart: on-failure

  postgres:
    container_name: postgres
    image: postgres:13
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 5s
      timeout: 10s
      retries: 10
    restart: always

  redis:
    container_name: redis
    image: redis:6
    restart: always

volumes:
  postgres_data:
